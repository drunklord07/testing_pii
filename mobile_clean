import os
import re

# ========== CONFIGURATION ==========
INPUT_FOLDER = "/your/path/to/input/folder"  # üîß Set your folder path
# ===================================

base_name = os.path.basename(os.path.normpath(INPUT_FOLDER))
OUTPUT_FOLDER = f"mobile_fixed_{base_name}"
SUMMARY_FILE = "mobile_cleanup_summary.txt"
REMOVED_LINES_FILE = "removed_lines.txt"

# Regex to find mobile triplets
MOBILE_TRIPLET_PATTERN = re.compile(r";no_field;([^;]+);MOBILE_REGEX;", re.IGNORECASE)

# Other PII triplet patterns ‚Äî if these exist, line is retained even if mobiles are invalid
OTHER_VALID_PATTERNS = [
    re.compile(r";no_field;[^;]+;CARD_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;AADHAAR_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;PAN_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;VOTERID_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;EMAIL_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;GSTIN_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;DL_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;IP_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;MAC_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;COORD_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;UPI_REGEX;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;ADDRESS_KEYWORD;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;NAME_KEYWORD;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;DOB_KEYWORD;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;ACCOUNT_NUMBER_KEYWORD;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;CUSTOMER_ID_KEYWORD;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;SENSITIVE_HINTS_KEYWORD;", re.IGNORECASE),
    re.compile(r";no_field;[^;]+;INSURANCE_POLICY_KEYWORD;", re.IGNORECASE),
]

def is_valid_mobile_number(value: str, line: str) -> bool:
    """Check if value is a valid mobile and appears correctly in the log."""
    if not (re.fullmatch(r"[6-9]\d{9}", value) or re.fullmatch(r"91[6-9]\d{9}", value)):
        return False  # ‚ùå Invalid format

    # Find log section before triplet
    triplet = f";no_field;{value};MOBILE_REGEX;"
    triplet_index = line.find(triplet)
    if triplet_index == -1:
        return False

    log_part = line[:triplet_index]

    # Search all occurrences of the value in log_part
    for match in re.finditer(re.escape(value), log_part):
        s, e = match.start(), match.end()
        left = log_part[s - 1] if s > 0 else ''
        right = log_part[e] if e < len(log_part) else ''

        if left.isalnum() or right.isalnum():
            continue  # ‚ùå Embedded in alphanum = invalid

        if left in ['"', "'", "[", "(", "{", ">", ":", "="] or right in ['"', "'", "]", ")", "}", "<", ",", " ", ";"]:
            return True  # ‚úÖ Surrounded properly

    return False

def has_other_valid_fields(line: str) -> bool:
    return any(p.search(line) for p in OTHER_VALID_PATTERNS)

def clean_line(line: str):
    original = line
    removed = 0
    matches = MOBILE_TRIPLET_PATTERN.findall(line)

    for mobile in matches:
        if not is_valid_mobile_number(mobile, original):
            line = line.replace(f";no_field;{mobile};MOBILE_REGEX;", "")
            removed += 1

    # Cleanup ;; or trailing semicolons
    line = re.sub(r";{2,}", ";", line)
    line = line.strip(" ;\n") + "\n"

    if removed == len(matches) and not has_other_valid_fields(original):
        return None, removed, True, original  # Entire line to be removed

    return line, removed, False, None

def print_progress(current, total, width=40):
    done = int(width * current / total)
    print(f"\r[{'‚ñà' * done}{'.' * (width - done)}] {current}/{total}", end='', flush=True)

def main():
    if not os.path.isdir(INPUT_FOLDER):
        print(f"‚ùå ERROR: Folder not found ‚Üí {INPUT_FOLDER}")
        return

    os.makedirs(OUTPUT_FOLDER, exist_ok=True)

    files = [f for f in os.listdir(INPUT_FOLDER) if f.endswith(".txt")]
    total_files = len(files)
    stats = {
        "files_written": 0,
        "lines_total": 0,
        "mobiles_removed": 0,
        "mobiles_remaining": 0,
        "lines_deleted": 0,
        "skipped_files": [],
        "removed_lines": []
    }

    for idx, file in enumerate(files, 1):
        in_path = os.path.join(INPUT_FOLDER, file)
        out_path = os.path.join(OUTPUT_FOLDER, file)

        try:
            with open(in_path, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()

            cleaned_lines = []
            for line in lines:
                stats["lines_total"] += 1
                cleaned, removed, deleted, original_line = clean_line(line)
                if deleted:
                    stats["lines_deleted"] += 1
                    stats["removed_lines"].append(original_line)
                    continue
                if cleaned:
                    cleaned_lines.append(cleaned)
                    stats["mobiles_remaining"] += len(MOBILE_TRIPLET_PATTERN.findall(cleaned))
                stats["mobiles_removed"] += removed

            with open(out_path, "w", encoding="utf-8") as f:
                f.writelines(cleaned_lines)

            stats["files_written"] += 1

        except Exception as e:
            stats["skipped_files"].append((file, str(e)))

        print_progress(idx, total_files)

    # Summary file
    print("\n‚úÖ Cleanup complete.")
    with open(SUMMARY_FILE, "w", encoding="utf-8") as f:
        f.write("=== MOBILE_REGEX Cleanup Summary ===\n")
        f.write(f"üìÇ Files scanned: {total_files}\n")
        f.write(f"üìù Lines scanned: {stats['lines_total']}\n")
        f.write(f"‚ùå MOBILE_REGEX removed: {stats['mobiles_removed']}\n")
        f.write(f"‚úÖ MOBILE_REGEX kept: {stats['mobiles_remaining']}\n")
        f.write(f"üóëÔ∏è Lines deleted (only invalid matches): {stats['lines_deleted']}\n")
        f.write(f"üìÅ Files written: {stats['files_written']}\n")
        if stats['skipped_files']:
            f.write("\n=== Skipped Files ===\n")
            for name, reason in stats['skipped_files']:
                f.write(f"{name} ‚Üí {reason}\n")
        f.write("====================================\n")

    if stats["removed_lines"]:
        with open(REMOVED_LINES_FILE, "w", encoding="utf-8") as f:
            f.writelines(stats["removed_lines"])
        print(f"üóëÔ∏è Removed lines logged to: {REMOVED_LINES_FILE}")

    print(f"üìÅ Output saved in: {OUTPUT_FOLDER}")
    print(f"üìÑ Summary report: {SUMMARY_FILE}")

if __name__ == "__main__":
    main()
